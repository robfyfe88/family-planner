generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/**
 * ---------- Planner v2 additions ----------
 */

enum RecurrenceKind {
  none
  weekly
  biweekly
  every_n_weeks
}

enum FeeModel {
  per_session   // multiply by #occurrences in month
  monthly       // same amount each month within date window (or open-ended)
  one_off       // charge once in start month
  total_range   // total for the whole range; see allocation
}

enum Allocation {
  evenly   // spread equally across months in range
  upfront  // take the whole amount in the start month
}

model PlannerActivity {
  id             String          @id @default(cuid())
  householdId    String
  createdById    String

  // UI fields
  type           String
  name           String
  notes          String?         @db.Text

  // date-only semantics (store as DateTime at midnight UTC)
  startDate      DateTime        @db.Date
  endDate        DateTime?       @db.Date   // <-- make optional (open-ended recurrences supported)

  // recurrence
  recurrenceKind RecurrenceKind
  daysOfWeek     Int[]
  intervalWeeks  Int?

  // FEES
  feeModel       FeeModel        @default(per_session)
  amount         Decimal         @db.Decimal(10, 2) @default(0)  // interpreted by feeModel
  allocation     Allocation?     // only used when feeModel = total_range

  // legacy (still read for back-compat)
  costPerSession Decimal         @db.Decimal(10, 2) @default(0)

  // relations
  household      Household       @relation(fields: [householdId], references: [id], onDelete: Cascade)
  createdBy      Member          @relation("CreatedByMember", fields: [createdById], references: [id], onDelete: Cascade)

  members        PlannerActivityMember[]
  budgetLinks    PlannerBudgetLink[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([householdId, startDate])
}

model PlannerActivityMember {
  activityId String
  memberId   String

  activity PlannerActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  member   Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([activityId, memberId])
}

model PlannerBudgetLink {
  id         String          @id @default(cuid())
  activityId String
  activity   PlannerActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  householdId String
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  year   Int
  month  Int // 1..12
  amount Decimal @db.Decimal(10, 2) // sessionsInMonth * costPerSession

  category String // e.g. "Kids Clubs"
  label    String // e.g. "Rugby club (Alistair)"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([activityId, year, month])
  @@index([householdId, year, month])
}

/**
 * ---------- Existing models ----------
 */

model HolidayEvent {
  id          String   @id @default(cuid())
  householdId String
  title       String
  startDate   DateTime
  endDate     DateTime
  color       String?
  notes       String?
  allDay      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  household Household @relation("HouseholdHolidayEvents", fields: [householdId], references: [id], onDelete: Cascade)

  @@index([householdId, startDate])
}

model Household {
  id                   String             @id @default(cuid())
  name                 String
  subscriptionTier     SubscriptionTier   @default(free)
  subscriptionStatus   SubscriptionStatus @default(active)
  billingProvider      String? // "stripe"
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodEnd     DateTime?

  members           Member[]
  activities        Activity[]
  schedules         Schedule[]
  overrides         Override[]
  schoolDays        SchoolDay[]
  leaves            Leave[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  BudgetCategory    BudgetCategory[]
  BudgetMonthly     BudgetMonthly[]
  Account           Account[]
  SavingsPot        SavingsPot[]
  PotTransfer       PotTransfer[]
  Transaction       Transaction[]
  RecurringTemplate RecurringTemplate[]
  PotMonthly        PotMonthly[]

  // Planner v2
  plannerActivities  PlannerActivity[]
  plannerBudgetLinks PlannerBudgetLink[]

  budgetLines         BudgetLine[]         @relation("HouseholdBudgetLines")
  budgetLineOverrides BudgetLineOverride[] @relation("HouseholdBudgetLineOverrides")

  nurserySettings NurserySettings?
  nurseryChildren NurseryChild[]

  annualSettings  AnnualSettings?
  careAssignments CareAssignment[]

  holidayEvents HolidayEvent[] @relation("HouseholdHolidayEvents")
}

model Member {
  id          String     @id @default(cuid())
  householdId String
  name        String
  role        MemberRole
  shortLabel  String?
  color       String?
  slot        String?
  userId      String?    @unique
  inviteEmail String?

  household      Household        @relation(fields: [householdId], references: [id], onDelete: Cascade)
  ParentPrefs    ParentPrefs[]
  CareAssignment CareAssignment[]

  // Planner v2 back-relations
  createdPlannerActivities PlannerActivity[]       @relation("CreatedByMember")
  activityMemberships      PlannerActivityMember[]

  @@index([householdId])
  @@index([inviteEmail])
}

enum BankHolidayRegion {
  england_and_wales
  scotland
  northern_ireland
}

model AnnualSettings {
  householdId       String            @id
  region            BankHolidayRegion @default(england_and_wales)
  skipWeekends      Boolean           @default(true)
  jointDays         Int               @default(5)
  prioritizeSeasons Boolean           @default(true)

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model ParentPrefs {
  memberId         String  @id
  offDaysBitmask   Int     @default(0)
  allowanceDays    Int     @default(20)
  getsBankHolidays Boolean @default(false)
  watchDaysBitmask Int     @default(0)

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model CareAssignment {
  id          String   @id @default(cuid())
  householdId String
  date        DateTime
  caregiverId String
  // Mark assignments created by "Auto-Plan" so Clear can safely remove them.
  isAuto      Boolean  @default(false)
  notes       String?

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  caregiver Member    @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@unique([householdId, date, caregiverId])
  @@index([householdId, date])
}

enum MemberRole {
  parent
  caregiver
  child
}

enum SubscriptionTier {
  free
  pro
  family
  trial // optional – treat like "pro" in logic if you use it
}

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
}

enum YearMode {
  FULL_YEAR
  TERM_TIME
}

model NurserySettings {
  householdId String   @id
  yearMode    YearMode @default(FULL_YEAR)
  termWeeks   Int      @default(38)

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
}

model NurseryChild {
  id                 String @id @default(cuid())
  householdId        String
  name               String
  ageYears           Int    @default(3)
  // money (pence)
  tfcMonthlyCapPence Int    @default(16667) // £166.67 default
  amRatePence        Int    @default(2800) // £28.00
  pmRatePence        Int    @default(2800) // £28.00
  dayRatePence       Int    @default(5500) // £55.00
  hourlyRatePence    Int    @default(750) // £7.50

  // sessions config
  amStart               String @default("08:00")
  amEnd                 String @default("12:30")
  pmStart               String @default("13:00")
  pmEnd                 String @default("18:00")
  fullDayHours          Float  @default(8.5)
  hourlyRoundingMinutes Int    @default(15)
  sessionTriggerMinutes Int    @default(60)

  weekPlans NurseryDayPlan[]

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@index([householdId])
}

model NurseryDayPlan {
  id        String  @id @default(cuid())
  childId   String
  // 1..5 => Mon..Fri
  weekday   Int
  startTime String?
  endTime   String?

  child NurseryChild @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@unique([childId, weekday])
}

model Activity {
  id          String  @id @default(cuid())
  householdId String
  name        String
  category    String?
  location    String?

  household Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  schedules Schedule[]

  @@index([householdId])
}

model Schedule {
  id          String    @id @default(cuid())
  householdId String
  activityId  String
  weekday     Int? // 0..6
  startTime   String?
  endTime     String?
  rrule       String?
  startDate   DateTime?
  endDate     DateTime?

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  activity  Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([householdId])
  @@index([activityId])
}

model Override {
  id           String         @id @default(cuid())
  householdId  String
  date         DateTime
  memberId     String?
  activityId   String?
  status       OverrideStatus
  newStartTime String?
  newEndTime   String?
  notes        String?

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@index([householdId])
  @@index([memberId])
  @@index([activityId])
}

enum OverrideStatus {
  added
  skipped
  moved
}

model SchoolDay {
  id           String   @id @default(cuid())
  householdId  String
  date         DateTime
  isSchoolOpen Boolean  @default(true)
  label        String?

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@unique([householdId, date])
  @@index([householdId])
}

model Leave {
  id          String   @id @default(cuid())
  householdId String
  memberId    String?
  startDate   DateTime
  endDate     DateTime
  type        String?
  notes       String?

  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@index([householdId])
  @@index([memberId])
}

/**
 * ---------- Budget core ----------
 */

enum MoneyFlow {
  income
  expense
  transfer
}

enum Recurrence {
  none
  monthly
  weekly
  yearly
  custom
}

model BudgetCategory {
  id          String    @id @default(cuid())
  householdId String
  name        String
  // Optional grouping (e.g., "Housing", "Transport")
  group       String?
  // Whether this category counts toward spend summaries (some income/transfer cats may not)
  isSpending  Boolean   @default(true)
  // "income" categories should have isSpending=false typically
  flow        MoneyFlow @default(expense)

  household         Household           @relation(fields: [householdId], references: [id], onDelete: Cascade)
  budgets           BudgetMonthly[]
  transactions      Transaction[]
  PotAllocation     PotAllocation[]
  RecurringTemplate RecurringTemplate[]

  // Back-relation for planner budget lines
  budgetLines BudgetLine[] @relation("CategoryBudgetLines")

  @@unique([householdId, name])
  @@index([householdId])
}

model BudgetMonthly {
  id           String @id @default(cuid())
  householdId  String
  categoryId   String
  month        Int // 1..12
  year         Int
  plannedPence Int // planned amount in pence

  household Household      @relation(fields: [householdId], references: [id], onDelete: Cascade)
  category  BudgetCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([householdId, categoryId, month, year])
  @@index([householdId, year, month])
}

model PotMonthly {
  id          String @id @default(cuid())
  householdId String
  potId       String
  month       Int // 1..12
  year        Int
  amountPence Int    @default(0)

  household Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  pot       SavingsPot @relation(fields: [potId], references: [id], onDelete: Cascade)

  @@unique([householdId, potId, month, year])
  @@index([householdId, year, month])
}

model Account {
  id          String  @id @default(cuid())
  householdId String
  name        String
  type        String? // "bank", "card", "wallet" etc
  isPrimary   Boolean @default(false)

  household         Household           @relation(fields: [householdId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  potTransfers      PotTransfer[]
  RecurringTemplate RecurringTemplate[]

  @@unique([householdId, name])
  @@index([householdId])
}

model SavingsPot {
  id           String @id @default(cuid())
  householdId  String
  name         String
  targetPence  Int?
  balancePence Int    @default(0)

  household         Household           @relation(fields: [householdId], references: [id], onDelete: Cascade)
  allocations       PotAllocation[]
  transfers         PotTransfer[]
  Transaction       Transaction[]
  RecurringTemplate RecurringTemplate[]
  monthlyPlans      PotMonthly[]

  @@unique([householdId, name])
  @@index([householdId])
}

model PotAllocation {
  id                 String @id @default(cuid())
  potId              String
  categoryId         String
  // % of category spend/income that should auto-move to the pot (0..10000 = 0..100.00%)
  percentBasisPoints Int    @default(0)

  pot      SavingsPot     @relation(fields: [potId], references: [id], onDelete: Cascade)
  category BudgetCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([potId, categoryId])
}

model PotTransfer {
  id          String   @id @default(cuid())
  householdId String
  potId       String
  accountId   String?
  date        DateTime @default(now())
  // positive = into pot; negative = out of pot
  amountPence Int
  memo        String?

  household Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  pot       SavingsPot @relation(fields: [potId], references: [id], onDelete: Cascade)
  account   Account?   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([householdId, date])
}

model Transaction {
  id          String    @id @default(cuid())
  householdId String
  accountId   String?
  categoryId  String?
  date        DateTime
  amountPence Int // income > 0; expense < 0 (by convention) OR use flow
  flow        MoneyFlow
  description String?
  potId       String? // optional: direct to pot

  household Household       @relation(fields: [householdId], references: [id], onDelete: Cascade)
  account   Account?        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category  BudgetCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  pot       SavingsPot?     @relation(fields: [potId], references: [id], onDelete: SetNull)

  @@index([householdId, date])
  @@index([householdId, categoryId])
  @@index([householdId, accountId])
}

model RecurringTemplate {
  id                String     @id @default(cuid())
  householdId       String
  name              String
  flow              MoneyFlow  @default(expense)
  defaultCategoryId String?
  defaultAccountId  String?
  defaultPotId      String?
  recurrence        Recurrence @default(monthly)
  // "RRULE" style optional field if you want richer rules later
  rrule             String?
  // next time you should instantiate a Transaction from this
  nextRunDate       DateTime
  amountPence       Int
  description       String?

  household       Household       @relation(fields: [householdId], references: [id], onDelete: Cascade)
  defaultCategory BudgetCategory? @relation(fields: [defaultCategoryId], references: [id], onDelete: SetNull)
  defaultAccount  Account?        @relation(fields: [defaultAccountId], references: [id], onDelete: SetNull)
  defaultPot      SavingsPot?     @relation(fields: [defaultPotId], references: [id], onDelete: SetNull)

  @@index([householdId, nextRunDate])
}

/**
 * ---------- Budget planner lines ----------
 */

enum BudgetOwner {
  joint
  A
  B
}

model BudgetLine {
  id                 String      @id @default(cuid())
  householdId        String
  label              String
  flow               MoneyFlow   @default(expense) // income | expense | transfer
  owner              BudgetOwner @default(joint)
  categoryId         String?
  recurrence         Recurrence  @default(monthly) // none | monthly | weekly | yearly | custom
  effectiveFrom      DateTime    @default(now())
  effectiveTo        DateTime?
  defaultAmountPence Int         @default(0)

  // named relations to satisfy back-relations
  household Household            @relation("HouseholdBudgetLines", fields: [householdId], references: [id], onDelete: Cascade)
  category  BudgetCategory?      @relation("CategoryBudgetLines", fields: [categoryId], references: [id], onDelete: SetNull)
  overrides BudgetLineOverride[]

  @@index([householdId, effectiveFrom, effectiveTo])
  @@index([householdId, flow])
  @@index([householdId, categoryId])
}

model BudgetLineOverride {
  id          String @id @default(cuid())
  householdId String
  lineId      String
  year        Int // 4-digit
  month       Int // 1..12
  amountPence Int    @default(0)

  // named household relation; line<->overrides relation inferred via fields/ref
  household Household  @relation("HouseholdBudgetLineOverrides", fields: [householdId], references: [id], onDelete: Cascade)
  line      BudgetLine @relation(fields: [lineId], references: [id], onDelete: Cascade)

  @@unique([lineId, year, month])
  @@index([householdId, year, month])
}
